#!/usr/bin/python

from sys import stdout, argv, exit

from os import getcwd, chdir, walk, path, makedirs, environ
from os.path import isdir, isfile, exists, join
from os import uname, geteuid

from getpass import getuser
from tempfile import mkdtemp

from io import BytesIO

from shutil import rmtree

from shlex import split
from subprocess import Popen, PIPE
from ConfigParser import ConfigParser

from getopt import getopt, GetoptError
from time import localtime, strftime

from xml.dom.minidom import Document

from errno import EEXIST

from zipfile import ZipFile
from zipfile import BadZipfile

import logging
VERSION = "0.4"

def get_basic_logger(lvl=logging.DEBUG):
    logformat = logging.Formatter("%(asctime)s - %(levelname)s - %(name)s - %(message)s")
    logger = logging.getLogger("CloudStackLogScraper")
    loghandler = logging.StreamHandler()
    loghandler.setFormatter(logformat)
    logger.addHandler(loghandler)
    return logger


class CloudStackVersion:
    """ we need a way to know version of CloudStack we are on now
        this is because some components change location between
        different versions
    """
    def __init__(self):
        self.CS_VERSION = 0

    def setVersion2(self):
        self.CS_VERSION = 2

    def setVersion3(self):
        self.CS_VERSION = 3

    def setVersion4(self):
        self.CS_VERSION = 4

    def getConfigDir(self):
        if self.CS_VERSION == 2:
            return "/etc/cloud/"
        if self.CS_VERSION == 3:
            return "/etc/cloud/"
        if self.CS_VERSION == 4:
            return "/etc/cloudstack/"

    def getLogDir(self):
        if self.CS_VERSION == 2:
            return "/var/log/cloud"
        if self.CS_VERSION == 3:
            return "/var/log/cloud"
        if self.CS_VERSION == 4:
            return "/var/log/cloudstack"

    def getVersion(self):
        """
            is there any CS installation here?
            CS 3.0.x:
                /etc/cloud
                /var/log/cloud
            CS 4.1.x:
                /etc/cloudstack
                /var/log/cloudstack
        """
        cs3_installed = True
        cs4_installed = True

        cs3_dirs = ["/etc/cloud", "/var/log/cloud", "/usr/share/java"]
        cs4_dirs = ["/etc/cloudstack", "/var/log/cloudstack", "/usr/share/java"]

        for d in cs3_dirs:
            cs3_installed &= isdir(d)

        for d in cs4_dirs:
            cs4_installed &= isdir(d)

        if cs3_installed:
            self.setVersion3()
        if cs4_installed:
            self.setVersion4()

        return (cs3_installed | cs4_installed | cs_version.CS_VERSION)


class Mode:
    """ Mode defines the level of logging to be collected
        all our subsystems have one variable to enable/disable it
            sbs_system
            sbs_db
            sbs_logs
            sbs_servicevms
    """
    def __init__(self):
        self.SYSTEM = 1
        self.DB = 2
        self.LOGS_CS_LATEST = 4
        self.LOGS_CS_ALL = 8
        self.LOGS_SYSTEM_LATEST = 16
        self.LOGS_SYSTEM_ALL = 32
        self.SERVICEVM = 64
        self.MINIMAL = 0
        self.NORMAL = 0
        self.FULL = 0
        self.MODE = 0

    def setMinimalMode(self):
        self.MINIMAL |= self.SYSTEM + self.DB + self.LOGS_CS_LATEST
        self.MODE = self.MINIMAL

    def setNormalMode(self):
        """ default mode """
        self.NORMAL |= self.SYSTEM + self.DB + self.LOGS_CS_LATEST \
            + self.LOGS_SYSTEM_LATEST
        self.MODE = self.NORMAL

    def setFullMode(self):
        self.FULL |= self.SYSTEM + self.DB + self.LOGS_CS_ALL \
            + self.LOGS_SYSTEM_ALL + self.SERVICEVM
        self.MODE = self.FULL

    def setNoDB(self):
        self.MODE &= ~self.DB

    def setNoServiceVM(self):
        """ This is default now, it's not implemented yet """
        self.MODE &= ~self.SERVICEVM

    def getMode(self):
        if self.MODE:
            return self.MODE
        else:
            exit(2)


class ShellUtils:
    def __init__(self, lvl=logging.DEBUG):
        self.logger = get_basic_logger(lvl)

    def info(self, msg, result=None):
        output = ""
        if msg is not None:
            output = "%-80s" % msg
        if result is True:
            output += "[ \033[92m%-2s\033[0m ]\n" % "OK"
        elif result is False:
            output += "[ \033[91m%-6s\033[0m ]\n" % "FAILED"
        stdout.write(output)
        stdout.flush()

    def info2(self, msg):
        output = ""
        output += "\033[91m%-2s\033[0m\n" % msg
        stdout.write(output)
        stdout.flush()

    def mkdir(self, p_path):
        if p_path:
            try:
                makedirs(p_path)
            except OSError as e:
                if e.errno == EEXIST: #file exists
                    pass
                else:
                    raise e

    def rm_rf(self, p_path):
        if isdir(p_path):
            rmtree(p_path)

    def cp_ar(self, p_src_path, p_dst_path):
        """ use this to copy directories recursively but also accept files """
        if not exists(p_dst_path):
            self.mkdir(p_dst_path)
        if (isdir(p_src_path) or isfile(p_src_path)) and isdir(p_dst_path):
            cmd = "cp -LR " + p_src_path + " " + p_dst_path
            cmd_args = split(cmd)
            try:
                p = Popen(cmd_args, -1)
                p.wait()
            except OSError as e:
                print e
        else:
            self.logger.warn("one of args is not a valid directory: cp -LR %s %s"\
                  % (p_src_path, p_dst_path))
            return False


    def compress_all_logs(self, p_path):
        """ TODO: check what are the compression tools available,
            now assuming default format
        """
        if isdir(p_path):
            self.logger.info("Compressing %s . . . please wait (this may take a while)." \
                 % p_path)
            cwd = getcwd()
            chdir("/tmp")
            path_split = p_path.split('/')
            zipfile_name = path_split[2] + ".zip"

            try:
                zf = ZipFile(zipfile_name, "w")
                for root, dirs, files in walk(path_split[1]):
                    for filename in files:
                        if filename == "cloud.keystore" or \
                            filename == "cloudmanagementserver.keystore" or \
                            filename == "key":
                                continue
                        file = join(root, filename)
                        zf.write(join(file))
                zf.close()
                info = "diagnostic information ready\n"
                stdout.write(info)
                self.info2(zipfile_name)
            except BadZipfile as ze:
                raise IOError("Unable to create zip archive because of %s" % ze)
            chdir(cwd)
        else:
            raise IOError("%s is not a valid directory" % p_path)


class CloudStackLogScraper:


    def __init__(self, argv, tmpdir='/tmp', loglevel=logging.DEBUG):
        self.logger = get_basic_logger(loglevel)
        self.shell = ShellUtils(loglevel)
        self.tmpdir = tmpdir
        self.shell.mkdir(self.tmpdir)
        self.arguments = " ".join([arg for arg in argv])
        self._writeManifest()
        self.cmds = [
            "hostname",
            "hostname -s",
            "hostname --fqdn",
            "df -h",
            "ps axf",
            "top -b -n 1",
            "free -k",
            "netstat -nlp",
            "date",
            "dmesg",
            "uname -a",
            "ifconfig -a",
            "route -n",
            "ip addr sh",
            "uptime",
            "whoami",
            "mount -l",
            "rpm -qa"
        ]
        self.files = [
            "/etc/cloudstack-release",
            "/etc/hosts",
            "/etc/resolv.conf",
            "/etc/sysctl.conf"
        ]

    def _writeManifest(self):
        ltime = localtime()
        my_hostname = uname()[1]
        str_date = strftime("%Y.%m.%d-%H.%M.%S", ltime)

        docManifiest = Document()
        elRoot = docManifiest.createElement("ROOT")
        elName = docManifiest.createElement("name")
        elHostname = docManifiest.createElement("hostname")
        elVersion = docManifiest.createElement("version")
        elTaken = docManifiest.createElement("taken")
        elUser = docManifiest.createElement("user")
        elOptions = docManifiest.createElement("options")

        txtName = docManifiest.createTextNode("cs-logscrape")
        txtVersion = docManifiest.createTextNode(VERSION)
        txtTaken = docManifiest.createTextNode(str_date)
        txtHostname = docManifiest.createTextNode(my_hostname)
        txtUser = docManifiest.createTextNode(getuser())
        txtOptions = docManifiest.createTextNode(self.arguments)

        docManifiest.appendChild(elRoot)
        elRoot.appendChild(elName)
        elRoot.appendChild(elVersion)
        elRoot.appendChild(elHostname)
        elRoot.appendChild(elTaken)
        elRoot.appendChild(elUser)
        elRoot.appendChild(elOptions)
        elName.appendChild(txtName)
        elVersion.appendChild(txtVersion)
        elTaken.appendChild(txtTaken)
        elUser.appendChild(txtUser)
        elOptions.appendChild(txtOptions)
        elHostname.appendChild(txtHostname)
        xml = docManifiest.toxml()

        manifestFilePath = self.tmpdir + "/Manifest.xml"
        manifestFile = open(manifestFilePath, 'w')
        manifestFile.write(xml)
        manifestFile.close()

    def log_subsystem(self, p_name):
        """ A subsystem is a layer of the OS platform we are looking at for information
        eg: Application (app logs, db logs etc)
            Network (netstat, network information)
            System  (systemcmds, disk io, work load)
        """
        if p_name:
            self.logger.debug("Collecting data from %s subsystem and saving at %s " % (p_name, self.tmpdir))
        else:
            self.logger.warn("Unknown subsystem %s" % p_name)

    def sbs_system_cmd_exec(self, p_cmd, sbs_name):
        """ exec commands """
        out_file = path.join(self.tmpdir, sbs_name, p_cmd.replace(" ", ""))
        if isdir(self.tmpdir):
            cmd_args = split(p_cmd)
            try:
                file = open(out_file, 'w')
                p = Popen(cmd_args, -1, None, None, file)
                p.wait()
                file.close()
            except OSError as e:
                self.logger.error("Skip command: " + str(cmd_args) + ", " + str(e))
        else:
            raise IOError("%s is not a valid directory" % self.tmpdir)

    def sbs_system(self):
        """
            sbs_system()    system subsystem
                    collect system properties
        """
        sbs_name = "system"
        self.log_subsystem(sbs_name)
        sbs_path = path.join(self.tmpdir, sbs_name)
        self.shell.mkdir(sbs_path)

        for cmd in self.cmds:
            self.sbs_system_cmd_exec(cmd, sbs_name)

        """ copy /etc """
        sbs_path_etc = path.join(sbs_path, "etc")
        self.shell.mkdir(sbs_path_etc)
        self.shell.cp_ar("/etc/sysconfig", sbs_path_etc)
        self.shell.cp_ar(cs_version.getConfigDir(), sbs_path_etc)

    def sbs_db(self):
        """
            sbs_db()    database subsystem
                    takes database dump and logs if any

                    mysqldump -u root -p  cloud
                    mysqldump -u root -p  cloud_usage
                    scripts/storage/secondary/cloud-install-sys-tmplt
        """
        sbs_name = "database"
        mysqldump_found = False
        binarypath = environ.get('PATH').split(':')
        for _path in binarypath:
            if isfile(path.join(_path, "mysqldump")):
                mysqldump_found = True
                break
        if not mysqldump_found:
            mysqldump_missing = "Unable to find mysqldump utility, \
                skipping database dump"
            self.shell.info(mysqldump_missing, False)
            return False

        self.log_subsystem(sbs_name)
        sbs_path = path.join(self.tmpdir, sbs_name)
        self.shell.mkdir(sbs_path)
        db_dict = self.get_db_properties()
        """ as of now we can only decrypt db pass for file type encType """
        if db_dict["db_enc_type"] != "file":
            raise RuntimeError("Encryption type %s unsupported" % db_dict["db_enc_type"])
        self.decrypt_db_pass(db_dict)

        db_dump_path_cloud = path.join(sbs_path, "cloud.sql")
        db_dump_path_cloud_usage = path.join(sbs_path, "cloud_usage.sql")

        """ we do not assume root user owns the cloud databases, we get the
            username from /etc/cloud/management/db.properties
        """
        mysqldump_cloud = "mysqldump -u " + db_dict['db_cloud_username'] + \
            " -h localhost -p" + db_dict['db_clear_text_pass'] + " cloud"
        mysqldump_cloud_usage = "mysqldump -u " + db_dict['db_cloud_username'] + \
            " -h localhost -p" + db_dict['db_clear_text_pass'] + " cloud_usage"

        """ exec dump commands """
        if isdir(sbs_path):
            cmd_args_cloud = split(mysqldump_cloud)
            cmd_args_cloud_usage = split(mysqldump_cloud_usage)
            try:
                file_cloud = open(db_dump_path_cloud, 'w')
                p = Popen(cmd_args_cloud, -1, None, None, file_cloud)
                p.wait()
                file_cloud.close()

                file_cloud_usage = open(db_dump_path_cloud_usage, 'w')
                p = Popen(cmd_args_cloud_usage, -1, None, None, file_cloud_usage)
                p.wait()
                file_cloud_usage.close()
            except OSError as e:
                raise e
        else:
            raise IOError("%s is not a valid directory" % sbs_path)

    def get_db_properties(self):
        """ reading /etc/cloud/management/db.properties, I am using special
            hack to read the config file our config file does not have any
            sections and ConfigParser expect to have at least one
        """
        db_dict = {}
        db_prop_file = cs_version.getConfigDir() + "/management/db.properties"
        db_dict["db_prop_file"] = db_prop_file

        if isfile(db_prop_file):
            config_file = open(db_prop_file)
            """ reading file to add one fake section, ConfigParser
                REQUIRES has one top section so we are good and creating
                this fake top section
            """
            config_file_content = config_file.read()
            config_file.close()
            """ adding fake section """
            config_file_content_with_section = "[default_section]\n"\
                                              + config_file_content
            config_file_content_io = BytesIO(config_file_content_with_section)
            config = ConfigParser()
            config.readfp(config_file_content_io)

            db_dict["db_cloud_host"] =\
            config.get("default_section", "db.cloud.host")
            db_dict["db_cloud_username"] =\
            config.get("default_section", "db.cloud.username")
            db_dict["db_cloud_password"] =\
            config.get("default_section", "db.cloud.password")
            db_dict["db_enc_type"] =\
            config.get("default_section", "db.cloud.encryption.type")
        else:
            raise IOError("Unable to find config file %s" % db_prop_file)

        """ how DB pass is encrypted if at all """
        key_file = cs_version.getConfigDir() + "/management/key"
        if isfile(key_file):
            key_file_fd = open(key_file)
            """ we expect just one line """
            line = key_file_fd.readline()
            key_file_fd.close()
            db_dict["db_msKey"] = line
        else:
            raise IOError("Cannot find database key file")
        return db_dict

    def decrypt_db_pass(self, p_db_dict):
            encPassword = p_db_dict["db_cloud_password"]
            msKey = p_db_dict["db_msKey"]

            """ chopping extra chars """
            encPassword = encPassword[4:]
            encPassword = encPassword[:len(encPassword) - 1]

            db_pass_cmd = "java -classpath \
            /usr/share/java/cloud-jasypt-1.8.jar:/usr/share/java/jasypt-1.9.0.jar \
                 org.jasypt.intf.cli.JasyptPBEStringDecryptionCLI decrypt.sh input="\
                          + encPassword\
                          + " password="\
                          + msKey\
                          + " verbose=false"

            db_pwdec_exec = Popen(split(db_pass_cmd), stdout=PIPE)
            p_db_dict["db_clear_text_pass"] = db_pwdec_exec.stdout.read().rstrip()
            return p_db_dict

    def sbs_logs(self):
        """
            sbs_logs() system subsystem
                    collect system properties
        """
        sbs_name = "logs"
        self.log_subsystem(sbs_name)
        sbs_path = path.join(self.tmpdir, "system/var")
        self.shell.mkdir(sbs_path)

        if mode.getMode() & \
                mode.LOGS_CS_LATEST & \
                ~(mode.LOGS_CS_ALL |
                    mode.LOGS_SYSTEM_ALL):
            files = [
                "api-server.log",
                "apilog.log",
                "awsapi.log",
                "catalina.out",
                "management-server.log",
                "setupManagement.log"
            ]
            logs_dir = cs_version.getLogDir() + "/management"
            sbs_path = path.join(self.tmpdir, "system/") + path.join(cs_version.getLogDir(), "management")
            for file in files:
                full_path = path.join(logs_dir, file)
                if exists(full_path):
                    self.shell.cp_ar(full_path, sbs_path)
                else:
                    self.logger.warn("file " + full_path + " does not exist")
        if mode.getMode() & mode.LOGS_CS_ALL &\
            (mode.LOGS_SYSTEM_ALL>0):
            full_path = cs_version.getLogDir() + "/management"
            sbs_path = path.join(self.tmpdir, "system/") + path.join(cs_version.getLogDir(), "management")
            self.shell.cp_ar(full_path, sbs_path)
        if mode.getMode() & \
                mode.LOGS_SYSTEM_LATEST & \
                ~mode.LOGS_SYSTEM_ALL:
            files = [
                "anaconda.log",
                "boot.log",
                "cron",
                "dmesg",
                "messages",
                "mysqld.log"
            ]
            logs_dir = "/var/log/"
            sbs_path = path.join(self.tmpdir, "system/var/log/")
            for file in files:
                full_path = path.join(logs_dir, file)
                self.shell.cp_ar(full_path, sbs_path)
        if mode.getMode() & mode.LOGS_SYSTEM_ALL:
            full_path = "/var/log"
            sbs_path = path.join(self.tmpdir, "system/var/")
            self.shell.cp_ar(full_path, sbs_path)

        try:
            self.compress_logs()
        except IOError as io:
            raise io

        if exists(self.tmpdir):
            try:
                self.shell.rm_rf(self.tmpdir)
            except OSError as e:
                raise IOError("Cannot remove temporary directory %s because of %s" % (self.tmpdir, e))

    def compress_logs(self):
        self.shell.compress_all_logs(self.tmpdir)

    def usage(self):
        print self.__class__.__name__ + " version " + VERSION + ", utility collects information" \
            " for CloudStack troubleshooting purposes" \
            "\n\n" \
            "usage: " + argv[0] + " [arguments]" \
            "\n\n" \
            "Arguments:\n" \
            "\t-h --help\t\t\t\tthis help\n" \
            "\t-f --full\t\t\t\tFull mode, collects everything\n" \
            "\t-m --minimal\t\t\t\tCollects only system properties and the"\
                " latest CloudStack log files\n" \
            "\t-d --nodb\t\t\t\tDo not include cloud database dump\n" \
            "\t-s --nosystemvm\t\t\tSkip service VMs information "\
                "[default, not implemented yet]\n" \
            "\n" \
            "Modes:\n" \
            " MINIMAL\tsystem info, latest CS log files\n" \
            " NORMAL\t\tsystem info, cloud database, latest CS log files,"\
                " latest system log files [default mode]\n" \
            " FULL\t\tsystem info, cloud database, all CS log "\
                "files, all system log files\n" \
            "\nWe have three modes defined but in case this is needed we can "\
                "switch off some particular things"\
                " and don't collect them if needed\n\n" \
            "\n"


# global variables
cs_version = CloudStackVersion()
cs_version.getVersion()
mode = Mode()

def main(argv):
    """
        main()    function calls subsystem sbs_* functions
        sbs_*    implementations of subsystems collecting logs and other info
        we assume the /tmp directory is our default log location
    """
    mode.setNormalMode()

    ltime = localtime()
    my_hostname = uname()[1]
    str_date = strftime("%Y.%m.%d", ltime)
    tmp_prefix = "CloudStack_" + str_date + "."
    tmp_dir = mkdtemp(prefix=tmp_prefix)
    tmp_dir = tmp_dir +  "/" + my_hostname
    tmp_dir_rm = tmp_dir

    cs = CloudStackVersion()
    sc = CloudStackLogScraper(argv, tmp_dir)

    try:
        opts, args = getopt(argv[1:], "hmfd", ["help", "minimal", "full", "nodb"])
        for o, a in opts:
            if o in ("-h", "--help"):
                sc.usage()
                exit()
            elif o in ("-m", "--minimal"):
                mode.setMinimalMode()
            elif o in ("-f", "--full"):
                mode.setFullMode()
            elif o in ("-d", "--nodb"):
                mode.setNoDB()
    except GetoptError as err:
        print str(err)
        sc.usage()
        exit(2)

    """ we need to have access to logs and configs, checking if we are root """
    if geteuid() != 0:
        print "Sorry, you need to run this utility as root"
        exit(1)
    if not cs.getVersion():
        print("Cannot find a CloudStack installation on this system, exiting.")
        exit()

    if mode.getMode() & mode.SYSTEM:
        sc.sbs_system()
    if mode.getMode() & mode.DB:
        sc.sbs_db()
    if mode.getMode() & \
        (mode.LOGS_CS_LATEST |
            mode.LOGS_CS_ALL |
            mode.LOGS_SYSTEM_LATEST |
            mode.LOGS_SYSTEM_ALL):
        sc.sbs_logs()

if __name__ == "__main__":
    from sys import argv
    main(argv)
